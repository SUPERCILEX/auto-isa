@misc{gapbs,
  title = {The GAP Benchmark Suite},
  author = {Scott Beamer and Krste Asanović and David Patterson},
  year = 2017,
  eprint = {1508.03619},
  archiveprefix = {arXiv},
  primaryclass = {cs.DC}
}

@article{suif,
  title = {Maximizing multiprocessor performance with the SUIF compiler},
  author = {Hall, M.W. and Anderson, J.M. and Amarasinghe, S.P. and Murphy, B.R. and Shih-Wei Liao and Bugnion, E. and Lam, M.S},
  year = 1996,
  journal = {Computer},
  volume = 29,
  number = 12,
  pages = {84--89},
  doi = {10.1109/2.546613},
  keywords = {Parallel processing;Phased arrays;Program processors;Information analysis;Concurrent computing;Privatization;Throughput;Multiprocessing systems;Cache memory;Programming profession}
}

@book{wolfe1995high,
  title = {High performance compilers for parallel computing},
  author = {Wolfe, Michael Joseph},
  year = 1995,
  publisher = {Addison-Wesley Longman Publishing Co., Inc.}
}

@inproceedings{naishlos2004autovectorization,
  title = {Autovectorization in GCC},
  author = {Naishlos, Dorit},
  year = 2004,
  booktitle = {Proceedings of the 2004 GCC Developers Summit},
  pages = {105--118},
  organization = {Citeseer}
}

@inproceedings{finkel2012autovectorization,
  title = {Autovectorization with LLVM},
  author = {Finkel, Hal},
  year = 2012,
  booktitle = {The LLVM Compiler Infrastructure 2012 European Conference}
}

@techreport{carlson1999introduction,
  title = {Introduction to UPC and language specification},
  author = {Carlson, William W and Draper, Jesse M and Culler, David E and Yelick, Kathy and Brooks, Eugene and Warren, Karen},
  year = 1999,
  institution = {Technical Report CCS-TR-99-157, IDA Center for Computing Sciences}
}

@inproceedings{hiranandani1992overview,
  title = {An overview of the fortran d programming system},
  author = {Hiranandani, Seema and Kennedy, Ken and Koelbel, Charles and Kremer, Ulrich and Tseng, C -W},
  year = 1992,
  booktitle = {Languages and Compilers for Parallel Computing: Fourth International Workshop Santa Clara, California, USA, August 7--9, 1991 Proceedings 4},
  pages = {18--34},
  organization = {Springer}
}

@article{chamberlain2007parallel,
  title = {Parallel programmability and the chapel language},
  author = {Chamberlain, Bradford L and Callahan, David and Zima, Hans P},
  year = 2007,
  journal = {The International Journal of High Performance Computing Applications},
  publisher = {Sage Publications Sage UK: London, England},
  volume = 21,
  number = 3,
  pages = {291--312}
}

@inproceedings{remoteAmo,
  title = {Remote Atomic Extension (RAE) for Scalable High Performance Computing},
  author = {Wang, Xi and Williams, Brody and Leidel, John D. and Ehret, Alan and Kinsy, Michel and Chen, Yong},
  year = 2020,
  booktitle = {2020 57th ACM/IEEE Design Automation Conference (DAC)},
  volume = {},
  number = {},
  pages = {1--6},
  doi = {10.1109/DAC18072.2020.9218589},
  keywords = {Computer architecture;Software;Registers;Atomic measurements;Distributed databases;Network interfaces;Fabrics}
}

@article{nyuUltra,
  title = {The NYU Ultracomputer—Designing an MIMD Shared Memory Parallel Computer},
  author = {Gottlieb and Grishman and Kruskal and McAuliffe and Rudolph and Snir},
  year = 1983,
  journal = {IEEE Transactions on Computers},
  volume = {C-32},
  number = 2,
  pages = {175--189},
  doi = {10.1109/TC.1983.1676201},
  keywords = {Computer architecture;fetch-and-add;MIMD;multiprocessor;Omega-network;parallel computer;parallel processing;shared memory;systolic queues;VLSI}
}

@article{fujiki2018memory,
  title = {In-memory data parallel processor},
  author = {Fujiki, Daichi and Mahlke, Scott and Das, Reetuparna},
  year = 2018,
  journal = {ACM SIGPLAN Notices},
  publisher = {ACM New York, NY, USA},
  volume = 53,
  number = 2,
  pages = {1--14}
}

@inproceedings{holt2014alembic,
  title = {Alembic: automatic locality extraction via migration},
  author = {Holt, Brandon and Briggs, Preston and Ceze, Luis and Oskin, Mark},
  year = 2014,
  booktitle = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages \& Applications},
  pages = {879--894}
}

@inproceedings{nelson2015latency,
  title = {$\{$Latency-Tolerant$\}$ software distributed shared memory},
  author = {Nelson, Jacob and Holt, Brandon and Myers, Brandon and Briggs, Preston and Ceze, Luis and Kahan, Simon and Oskin, Mark},
  year = 2015,
  booktitle = {2015 USENIX Annual Technical Conference (USENIX ATC 15)},
  pages = {291--305}
}

@inproceedings{goodwin2003automatic,
  title = {Automatic generation of application specific processors},
  author = {Goodwin, David and Petkov, Darin},
  year = 2003,
  booktitle = {Proceedings of the 2003 international conference on Compilers, architecture and synthesis for embedded systems},
  pages = {137--147}
}

@article{asips,
  title = {A novel methodology for the design of application-specific instruction-set processors (ASIPs) using a machine description language},
  author = {Hoffmann, A. and Kogel, T. and Nohl, A. and Braun, G. and Schliebusch, O. and Wahlen, O. and Wieferink, A. and Meyr, H.},
  year = 2001,
  journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = 20,
  number = 11,
  pages = {1338--1354},
  doi = {10.1109/43.959863},
  keywords = {Design methodology;Application specific processors;Computer architecture;Programming;Buildings;Application software;High level languages;Assembly;Hardware design languages;Code standards}
}

@inproceedings{besta2014slim,
  title = {Slim fly: A cost effective low-diameter network topology},
  author = {Besta, Maciej and Hoefler, Torsten},
  year = 2014,
  booktitle = {SC'14: proceedings of the international conference for high performance computing, networking, storage and analysis},
  pages = {348--359},
  organization = {IEEE}
}

@book{chen2021ai,
  title = {AI for computer architecture: principles, practice, and prospects},
  author = {Chen, Lizhong and Penney, Drew and Jim{\'e}nez, Daniel},
  year = 2021,
  publisher = {Springer}
}

@inproceedings{jia2012stargazer,
  title = {Stargazer: Automated regression-based GPU design space exploration},
  author = {Jia, Wenhao and Shaw, Kelly A and Martonosi, Margaret},
  year = 2012,
  booktitle = {2012 IEEE International Symposium on Performance Analysis of Systems \& Software},
  pages = {2--13},
  organization = {IEEE}
}

@inproceedings{yin2020experiences,
  title = {Experiences with ml-driven design: A noc case study},
  author = {Yin, Jieming and Sethumurugan, Subhash and Eckert, Yasuko and Patel, Chintan and Smith, Alan and Morton, Eric and Oskin, Mark and Jerger, Natalie Enright and Loh, Gabriel H},
  year = 2020,
  booktitle = {2020 IEEE International Symposium on High Performance Computer Architecture (HPCA)},
  pages = {637--648},
  organization = {IEEE}
}

@article{Banerjee1995ThePC,
  title = {The Paradigm Compiler for Distributed-Memory Multicomputers},
  author = {Prithviraj Banerjee and John A. Chandy and Manish Gupta and IV EugeneW.Hodges and John G. Holm and Antonio Lain and Daniel J. Palermo and Shankar Ramaswamy and Ernesto Su},
  year = 1995,
  journal = {Computer},
  volume = 28,
  pages = {37--47},
  url = {https://api.semanticscholar.org/CorpusID:6345303}
}

@inproceedings{Anderson1995DataAC,
  title = {Data and computation transformations for multiprocessors},
  author = {Jennifer M. Anderson and Saman P. Amarasinghe and Monica S. Lam},
  year = 1995,
  booktitle = {ACM SIGPLAN Symposium on Principles \& Practice of Parallel Programming},
  url = {https://api.semanticscholar.org/CorpusID:77292}
}

@article{Stitt2020PANDORA,
  title = {PANDORA},
  author = {Greg Stitt and David Campbell},
  year = 2020,
  journal = {ACM Transactions on Embedded Computing Systems (TECS)},
  volume = 19,
  pages = {1--17},
  url = {https://api.semanticscholar.org/CorpusID:227143144}
}

@article{Harel2019SourcetoSourcePC,
  title = {Source-to-Source Parallelization Compilers for Scientific Shared-Memory Multi-core and Accelerated Multiprocessing: Analysis, Pitfalls, Enhancement and Potential},
  author = {Re'em Harel and Idan Mosseri and Harel Levin and Lee-or Alon and Matan Rusanovsky and Gal Oren},
  year = 2019,
  journal = {International Journal of Parallel Programming},
  volume = 48,
  pages = {1--31},
  url = {https://api.semanticscholar.org/CorpusID:199512434}
}

@inproceedings{autoCI,
  title = {Automatic custom instruction identification in memory streaming algorithms},
  author = {Haa\ss{}, Martin and Bauer, Lars and Henkel, J\"{o}rg},
  year = 2014,
  booktitle = {Proceedings of the 2014 International Conference on Compilers, Architecture and Synthesis for Embedded Systems},
  location = {New Delhi, India},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  series = {CASES '14},
  doi = {10.1145/2656106.2656114},
  isbn = 9781450330503,
  url = {https://doi.org/10.1145/2656106.2656114},
  abstract = {Application-specific instruction set processors (ASIPs) extend the instruction set of a general purpose processor by dedicated custom instructions (CIs). In the last decade, reconfigurable processors advanced this concept towards run-time reconfiguration to increase the efficiency and adaptivity. Compiler support for automatic identification and implementation of ASIP CIs exists commercially and on research platforms, but these compilers do not support CIs with memory accesses, as ASIP CIs typically work on register file data. While being acceptable for ASIPs, this imposes a limitation for reconfigurable processors as they achieve their performance by exploiting data-level parallelism. Consequently, we propose a novel approach to CI identification for runtime reconfigurable processors with support for memory operations in contrast to previous works that explicitly exclude them. Our algorithm extracts memory access patterns which allows us to abstract from single memory operations and merge accesses to optimally utilize the available memory bandwidth. We implemented our algorithm in a state-of-the-art compiler framework.The largest CI identified in our benchmarks consists of 2071 nodes (average 999 nodes), and a single generated CI can cover a whole computational kernel (up to 99\%).},
  articleno = 6,
  numpages = 9,
  keywords = {streaming memory access, reconfigurable architecture, load/store merging, custom instruction generation}
}

@article{FINDER,
  title = {FINDER: Find Efficient Parallel Instructions for ASIPs to Improve Performance of Large Applications},
  author = {Gnanasambandapillai, Vikkitharan and Peddersen, Jorgen and Ragel, Roshan and Parameswaran, Sri},
  year = 2020,
  journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = 39,
  number = 11,
  pages = {3577--3588},
  doi = {10.1109/TCAD.2020.3012211},
  keywords = {Hardware;Program processors;Clocks;Logic gates;Generators;Design automation;Integrated circuits;Application specific instructions;bioinformatics;customized instructions;design synthesis;genomics;hardware/software codesign;heterogeneous processor}
}

@inproceedings{ayers2020classifying,
  title = {Classifying memory access patterns for prefetching},
  author = {Ayers, Grant and Litz, Heiner and Kozyrakis, Christos and Ranganathan, Parthasarathy},
  year = 2020,
  booktitle = {Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems},
  pages = {513--526}
}

@inproceedings{jamilan2022apt,
  title = {Apt-get: Profile-guided timely software prefetching},
  author = {Jamilan, Saba and Khan, Tanvir Ahmed and Ayers, Grant and Kasikci, Baris and Litz, Heiner},
  year = 2022,
  booktitle = {Proceedings of the Seventeenth European Conference on Computer Systems},
  pages = {747--764}
}
